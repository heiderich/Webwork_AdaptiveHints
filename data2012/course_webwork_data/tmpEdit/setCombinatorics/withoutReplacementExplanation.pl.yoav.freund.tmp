DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "PGML.pl",
  "MathObjects.pl",
  "PGcourse.pl",
);

TEXT(beginproblem);
$showPartialCorrectAnswers = 1;

######################################################################
Context("Numeric");

$R1=6-random(1,5,1);
$F1=fact($R1);

$R2=6-random(1,5,1);
$F2=fact($R2);

$R3=random(3,10,1);
$R4=random(1,$R3-1,1);
$C=fact($R3)/fact($R3-$R4);

TEXT(PGML::Format2(<<'END_PGML'));
## Permutations and combinations ##

Armed with the concepts of sets, tuples and set size we can now tackle
some more interesting combinatorial questions.

#### Permutations ####

How many ways are there to order (shuffle)
a deck of 52 cards?  Each such ordering is called a _permutation_
of the cards. Well, the result is a 52-tuple, drawn from a set of
size 52, in which each card appears exactly once. 

Suppose we hold a deck of cards and create the permutation by repeating moving cards from this deck to a stack on the table. Each time we can select any card from the deck and place it on top of the stack. Clearly, all card orders can be generated in this way. Let count the number of choices that we have. For the first card we have 52 choices. For the second card we have 51 choices (because one card has already been put down), for the third card we have 50 choices and so on, down to a deck of one card, for which there is only one choice. Therefore, the number of orders (or permutations)  is [`52 \cdot 51 \cdot 50 \cdots 1`]  which is called [`52`]   _factorial_ and denoted as   [`52!`].  More generally, the number of
permutations of [`n`] elements is [`n`]  factorial or [`n!`] 

Compute the number for the following expressions:
o [`[$R1]! = `] [______]{$F1}
o [`[$R2]! = `] [______]{$F2}

#### Sampling with and without replacement when the order matters ####

Suppose there are four children---Alice, Bill, Christie, and Doug---at an animal
shelter, checking out the current pool of [`n`] dogs. Each child writes down the 
name of the dog he or she likes most. How many possible outcomes are there?

We can represent each outcome as a 4-tuple (Alice's choice, Bill's choice,
Christie's choice, Doug's choice) in which each entry is the name of a dog. 
So the number of outcomes is [`n^4`] 

Now suppose that these same children are actually picking out dogs. First Alice 
chooses a dog to adopt, then Bill chooses a dog to adopt, and so on. How many 
outcomes are there now?

In this situation, Alice has [`n`] choices, but Bill has only [`n-1`] choices,
Christie has [`n-2`] choices, and Doug has [`n-3`] choices. So there are [`n(n-1)(n-2)(n-3)`] possible outcomes.

The first situation is called _sampling with replacement_: the
outcomes are tuples in which the same element (dog) can occur more
than once. The number of such [`k`] tuples, chosen from [`n`] elements, is [`n^k`]  In the example, [`k=4`]  The second situation is _sampling
  without replacement_: the outcomes are tuples in which no element
can be repeated. The number of such [`k`] tuples, chosen from [`n`] elements, is [`n(n-1)(n-2) \cdots (n-k+1)`]  


Coming back to sampling [`k`] out of [`n`] elements without replacement,
we can write it succinctly as 

[``
n(n-1)(n-2) \cdots (n-k+1) = \frac{n\cdot(n-1)\cdot (n-2) \cdots 2 \cdot 1}{(n-k)\cdot(n-k-1)\cdot(n-k-2)\cdots 2 \cdot 1}=\frac{n!}{(n-k)!}
``]

Suppose [$R4] items are selected out of a set of [$R3] distinct items, (and suppose that the order of selection matters). How many ways are there to choose the [$R4] items? [___________________]{$C}
END_PGML

######################################################################

ENDDOCUMENT();        # This should be the last executable line in the problem.
