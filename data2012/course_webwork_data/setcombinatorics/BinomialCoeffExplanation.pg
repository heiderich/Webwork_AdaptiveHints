DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "PGML.pl",
  "MathObjects.pl",
  "PGcourse.pl",
  "parserFunction.pl"
);

TEXT(beginproblem);
$showPartialCorrectAnswers = 1;

######################################################################
Context("Numeric");

$R1=random(5,20,1);  # Number of balls (both white and black)
$R2=random(2,$R1-1,1);  # Number of white balls

Context()->variables->add(n => "Real");
Context()->variables->add(k => "Real");

$TestPoints=[[1,3],[2,3],[3,3],[2,10],[5,10],[7,10],[9,10]];
#$TestPoints=[[1,2]];

$F1 = Formula("n!/(n-k)");
$F1 ->{test_points} = $TestPoints;

$F2 = Formula("k!");
$F2->{test_points}=[[1],[2],[3],[4],[5],[6],[7],[8],[9]];

$F3 = Formula("n!/((n-k)!(k)!)");
$F3->{test_points} = $TestPoints;

TEXT(PGML::Format2(<<'END_PGML'));
#### Sampling without replacement when the order doesn't matter ####

Snow White is off to pick strawberries and asks three of the dwarfs (chosen 
from the set of size seven: [`\{\mbox{Dopey, Grumpy, Doc, Happy, Bashful, Sneezy, Sleepy}\}`] to join 
her. How many possible groups are there?

In this case, it is misleading to represent an outcome as a 3-tuple,
because, for instance, [`\mbox{(Dopey, Sleepy, Doc)}`] is a different
3-tuple from [`\mbox{(Sleepy, Dopey, Doc)}`] but they represent the
same group. So if we count tuples, we would be
_over-counting_. Instead, we ought to represent an outcome as a set,
[` \{\mbox{Dopey, Doc, Sleepy}\}`]

So the question becomes: how many different subsets of three dwarfs are there?
In general, a set of size [`n`] has 

(A) [``{n \choose k} \ \doteq \ \frac{n!}{k! (n-k)!} ``] 

subsets of size [`k`].  So in our example, the answer is [`{7 \choose 3} = 35`]. Formula (A) is called the _Binomial formula_ or the _Binomial coefficient_.

Let's step back and derive Formula (A): how many subsets of size [`k`]
does a set of [`n`] elements have? We will use the following
strategy. First, we will assume that the order of the elements in the
set *does* matter. Then we will calculate the amount by which we
over-counted and divide the first result by it.

1. How many sequences of length [`k`] (where order *does* matter) can
   we choose from a set of [`n`] different elements? We already have
   the formula for this from the analysis of "sampling without
   replacement when the order matters" (remember the children choosing
   the dogs example...). So you surely remember that the formula is 
END_PGML
BEGIN_TEXT
$BCENTER    (B)  \{ans_rule(15)\} $ECENTER
END_TEXT
$TestPoints2 = [[1,3],[3,3],[2,6],[3,5],[7,15]];
ANS(fun_cmp("n!/(n-k)!", var=>["k","n"], test_points=>$TestPoints2));
BEGIN_PGML
2. Ok, so now we have the number of sequences of length [`k`], but we
   want to count *sets* not *sequences*, in other words, order does
   not matter. By counting all sequences we have counted each set a
   number of times. Convince yourself that this number is the same for
   all sets of size [`k`]. If we can calculate this number, we can
   divide formula (B) by it and get the correct number of sets. So,
   how many ways are there to order [`k`] elements? (hint, recall
   computing the number of ways to shuffle a deck of cards) it is:
END_PGML
BEGIN_TEXT
$BCENTER   (C) \{ans_rule(15)\} $ECENTER
END_TEXT
$TestPoints1 = [1,2,3,4,5,6,7,10];
ANS(fun_cmp("k!", var=>["k"], test_points=>$TestPoints1));
BEGIN_PGML
3. Dividing (B) by (C) we get the Binomial Equation:
END_PGML
BEGIN_TEXT
$BCENTER    (A) \({n \choose k} = \) \{ans_rule(15)\} $ECENTER
END_TEXT
ANS(fun_cmp("n!/(k!(n-k)!)", var=>["k","n"], test_points=>$TestPoints2));
BEGIN_PGML
---
*EXAMPLE:*
Binomials appear everywhere. here is another example: how many strings in [`\{0,1\}^{10}`] contain exactly
_four_ 1s?  Well, we need to choose four positions of the ten
possibilities in which to place the 1s; that is, we choose a subset of
size four from [`\{1,2,\ldots,10\}`]   The number of ways to do this is [`{10 \choose 4} = 210`] 
---
*PROBLEM:*
Suppose we have [$R1] bins, numbered 1,...,[$R1] and that we have [$R1] balls,
[$R2] of them white and [$R1-$R2] of them black.

o *Copy* the total number of balls here [___]{$R1}
o *Copy* the number of white balls here [___]{$R2}
o How many white/black patterns can one make by placing the balls in the bins? [________]{"$R1!/($R2!*($R1-$R2)!)"}

END_PGML

######################################################################

ENDDOCUMENT();        # This should be the last executable line in the problem.
