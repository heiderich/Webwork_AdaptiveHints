DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
  "PGstandard.pl",
  "PGML.pl",
  "MathObjects.pl",
  "parserRadioButtons.pl",
  "compoundProblem.pl",
  "Parser.pl",
  "PGunion.pl",
  "PGcourse.pl",
  "PGchoicemacros.pl",
);

TEXT(beginproblem);
BEGIN_PROBLEM();

##############################################

$isProfessor = ($studentLogin eq 'yoav.freund' || $studentLogin eq 'professor');

#
#  Start a compound problem.  See the compoundProblem.pl
#  file for more details about the parameters you
#  can supply.
#
$cp = new compoundProblem(
  parts => 3,                  # the total number of parts in this problem
  totalAnswers => 4,           # total answers in all parts combined
  parserValues => 1,           # make parser objects from student answers
  allowReset => $isProfessor,  # professors get Reset button for testing
  nextStyle => 'Button',
  nextVisible => 'ifCorrect',
);
$part = $cp->part;             # look up the current part

Context("Interval");
$showPartialCorrectAnswers = 1; # show student the correct part of their answer.

##############################################
#
#  Part 1
#

if ($part == 1) {

$S=Set(3,5,7,9);

TEXT(PGML::Format2(<<'END_PGML'))
*(Part 1/3)*

##Mathematical Preliminaries##

Probability theory is about sets. In the first lesson you encountered
the set of possible outcomes of flipping two coins which contains four
elements. If we use [`H`] to denote "Heads" and [`T`] to denote
"Tails" then the set of possible outcomes, also known as the 
_outcome space_ contains four elements: [`\{(H,H),(H,T),(T,H),(T,T)\}`]. We say
that the outcome space is the set of four _tuples_ . As the
concepts of "set" and "tuple" will be used many times throughout
the course, we take some pains to define these concepts and the
associated notation, in a somewhat formal mathematical way.

#### Sets ####
*Sets* are collections of _elements_ . 
We will mostly consider sets of numbers, but elements can be most anything.

A set can be specified by listing its elements between braces, as in

o The possible outcomes of the roll of a six sided die: [`A= \{1,2,3,4,5,6\}`]
o The positive integers: [`\mathbb{Z}^+= \{1,2,\ldots\}`]
o The possible outcomes of the flip of a coin: [`C= \{ H,T \}`]

We say that [`5`] is an element of [`A`] and denote it by [`5 \in A`]. Sets
are _unordered_ collections, in other words [`\{1,2,3,4,5,6\} =
\{5,2,1,3,4,6\}`]. The number of times an element can appear in a set
is either 0 or 1, *an element  cannot appear multiple times 
in the set*. For that there is a different construct called *bags* which we shall not use in this course.

Write the set of odd numbers that are larger than 2 and smaller than 10 ? (Separate the elements using Commas and surround the list with braces as in the examples above.)

Answer = [______]{Set(3,5,7,9)}

END_PGML

#
#  the useGrader() method sets the grader for this part.
#
# $cp->useGrader(~~&std_problem_grader);

}

##############################################
#
#  Part 2
#

if ($part == 2) {

#
#  The values of a and b are obtained from the
#  first part of the problem.
#
TEXT(PGML::Format2(<<'END_PGML'))
*(Part 2/3)*

Instead of listing the elements of a set, one can define a set by
specifying the precise conditions for an element to be in the set. For
example:

[``\mathbb{Z}^+ = \left\lbrace x: x \mbox{ is a positive integer } \right\rbrace``]

[``
\mathbb{R}   = \left\lbrace x: x \mbox{ is a real number} \right\rbrace
``]

The set of even numbers:
[``
E = \left\lbrace x \in \mathbb{Z}^+ : \frac{x}{2} \in \mathbb{Z}^+ \right\rbrace
``]

The elements of sets don't have to be numbers, for example, the 
set of all locations on Earth is not a number, but can be described by a pair of numbers:
[``
Loc = \left\lbrace x: x \mbox{ is a particular geographic location, as described by logitude and lattitude} \right\rbrace
``]

Finally there are sets consisting of elements that defy description using numbers, for example: the set of all people living in the world.

When set [`S`] is _contained_ in set [`T`] (that is, [`x \in S \Rightarrow x
\in T`]), we write [`S \subseteq T`]. For instance, [`\mathbb{Z}^+
\subseteq \mathbb{R}`]. When [`S`] is _contained_ in [`T`] we say that [`S`] is a _subset_ of [`T`].

The _empty set_ contains no elements and is denoted by [`\lbrace \rbrace`] or [`\emptyset`].

---
*Review Problems*

For each of the following statements, write "1" if true and "0" if false.

o  [_]{1} [`\{1,2\} \subseteq \{2,4,1\}`]
o  [_]{1} [`\emptyset \subseteq \{ 5 \}`]
o  [_]{0} [`\{2,4,1\} \subseteq \{1,2\}`]

Let [`(a,b)`] denote the set of real numbers in the range [` a < x < b `].
For each of the following statements, write "1" if true and "0" if false.

o [_]{1} [` (1,2) \subseteq (1,3) `]
o [_]{0} [` (2,4) \subseteq (1,3) `]
o [_]{0} [` (1,3) \subseteq (2,4) `] 
o [_]{1} [` \{3,4\} \subseteq (2,5) `]
o [_]{0} [` \{1,2\} \subseteq (1,2) `]
o [_]{0} [` (1,2) \subseteq \{1,2\} `]

END_PGML

}

##############################################
#
#  Part 3
#

if ($part == 3) {

@RE1=NchooseK(10,4);
$R1=Set("{".join(",",@RE1)."}");

@RE2=NchooseK(10,6);
$R2=Set("{".join(",",@RE2)."}");

$Omega=Set(Set(0,1,2,3,4,5,6,7,8,9)+Set(2,3));
$U=Set($R1+$R2);
$R1C=Set($Omega-$R1);
$R2C=Set($Omega-$R2);

TEXT(PGML::Format2(<<'END_PGML'))
*(Part 3/3)*

#### Unions and Intersections ####
Suppose [`A`] and [`B`] are two sets. The _intersection_ of the two sets, denoted [`A \cap B`] contains the elements that are in _both_ sets. 

Thus, for example, [`` \{1,2,3,4,5,6\} \cap \{2,4,6,8,10\}=\{2,4,6\} ``]

The _union_ of two sets, denoted [`A\cup B`], contains those elements that are _either_ in [`A`] or in [`B`] (or in both).

For example [`` \{1,2,3,4,5,6\} \cup \{2,4,6,8,10\}=\{1,2,3,4,5,6,8,10\} ``]

#### Spaces and Complements ####

In probability we call the set of all possible outcomes (for a particular experiment) as the _outcome space_ and denote it by [`\Omega`]. Subsets of [`\Omega`] are called _events_. The _complement_ of an event [`A`] is the set of outcomes that are in [`\Omega`] but not in [`A`].

For example, suppose [`\Omega=[$Omega]`] then the
complement of the set [` A=\{1,9,0\}`] is [` A^c=\{2,3,4,5,6,7,8\}`].

Keeping the same assumption on [`\Omega`]. Write the following sets (don't forget to put braces around the list of numbers):

o [`[$R1] \cup [$R2] = `] [__________________]{$U}
o [`[$R1]^c = `] [______________________]{$R1C}
o [`[$R2]^c = `] [______________________]{$R2C}
o [`[$R1] \cap [$R2] = `] [______________________]{$R1->intersect($R2)}
o [`[$R1] \cap [$R2]^c = `] [______________________]{$R1->intersect($R2C)}
o [`[$R1]^c \cap [$R2] = `] [______________________]{$R1C->intersect($R2)}
o [`[$R1]^c \cap [$R2]^c = `] [______________________]{$R1C->intersect($R2C)}


END_PGML
}

##############################################

END_PROBLEM();
ENDDOCUMENT();        # This should be the last executable line in the problem.
